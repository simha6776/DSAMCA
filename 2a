PDL VTU MYSURU
6
2. Design, develop, and execute a program in C to evaluate a valid postfix expression 
using stack. Assume that the postfix expression is read as a single line consisting of 
non-negative single digit operands and binary arithmetic operators. The arithmetic 
operators are + (add), - (subtract), * (multiply) and / (divide).
#include <stdio.h>
#include <ctype.h> // for isdigit()
#define SIZE 100
int stack[SIZE];
int top = -1;
// Push operation
void push(int value) {
 if (top == SIZE - 1) {
 printf("Stack Overflow\n");
 } else {
 stack[++top] = value;
 }
}
// Pop operation
int pop() {
 if (top == -1) {
 printf("Stack Underflow\n");
 return -1;
 } else {
 return stack[top--];
 }
}
int main() {
 char postfix[SIZE];
 int i = 0, op1, op2, result;
 char ch;
 printf("Enter a valid postfix expression (single-digit operands only): ");
 scanf("%s", postfix); // Read postfix expression as a string
 while ((ch = postfix[i++]) != '\0')
{
 if (isdigit(ch)) 
 {
 // Convert char to int and push
 push(ch - '0');
 }
else 
{
 // It's an operator: pop two operands
 op2 = pop();
 op1 = pop();
 switch (ch)
{
 case '+':
 result = op1 + op2;
 break;
 case '-':
 result = op1 - op2;
 break;
 case '*':
 result = op1 * op2;
 break;
 case '/':
 result = op1 / op2;
 break;
 default:
 printf("Invalid operator: %c\n", ch);
 return 1;
 }
 push(result);
 }
 }
 // Final result will be at the top of the stack
 result = pop();
 printf("Result of the postfix expression: %d\n", result);
 return 0;
}
Tracing:
i
ch = 
postfix[i++]
isdigit(ch)?
Stack 
Before
Operation 
Done
Stack After
0
'5'
 
 Yes
[]
push(5)
[5]
1
'3'
 
 Yes
[5]
push(3)
[5, 3]
2
'*'