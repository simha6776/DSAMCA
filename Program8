#include <stdio.h>
#define MAX 10
#define INF 9999

void dijkstra(int graph[MAX][MAX], int n, int start) {
    int distance[MAX], visited[MAX], i, j, minDistance, nextVertex;

    // Initialize distances and visited array
    for (i = 0; i < n; i++) {
        distance[i] = graph[start][i];
        visited[i] = 0;
    }

    distance[start] = 0;
    visited[start] = 1;

    for (i = 1; i < n; i++) {
        minDistance = INF;

        // Find the unvisited vertex with the smallest distance
        for (j = 0; j < n; j++) {
            if (!visited[j] && distance[j] < minDistance) {
                minDistance = distance[j];
                nextVertex = j;
            }
        }

        visited[nextVertex] = 1;
// Update distances from the nextVertex
        for (j = 0; j < n; j++) {
            if (!visited[j] && (minDistance + graph[nextVertex][j] < distance[j])) {
                distance[j] = minDistance + graph[nextVertex][j];
            }
        }
    }

    // Print result
    printf("\nShortest distances from vertex %d:\n", start);
    for (i = 0; i < n; i++) {
        printf("To vertex %d = %d\n", i, distance[i]);
    }
}

int main() {
    int graph[MAX][MAX], n, i, j, start;

    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the adjacency matrix (use %d for infinity):\n", INF);
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    printf("Enter the starting vertex (0 to %d): ", n - 1);
   scanf("%d", &start);

    dijkstra(graph, n, start);

    return 0;
}
